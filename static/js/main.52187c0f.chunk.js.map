{"version":3,"sources":["componentes/Datos.js","serviceWorker.js","index.js"],"names":["volver","ReactDOM","render","document","getElementById","generarTabla","users","map","data","data-title","name","first","last","location","city","nat","src","picture","thumbnail","onClick","usuario","element","large","login","username","dob","age","email","mostrarInformacion","bind","this","Datos","useState","usuarios","setUsuarios","useEffect","fetch","then","response","json","datos","results","useDatos","className","align","scope","Boolean","window","hostname","match","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2MAsCA,SAASA,IAEPC,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,SAIpD,SAASC,EAAaC,GAEpB,OAAOA,EAAMC,IAAI,SAASC,GACxB,OACE,+BACE,oBAAIC,aAAW,QAAf,SAAwBD,EAAKE,KAAKC,QAClC,oBAAIF,aAAW,OAAf,SAAuBD,EAAKE,KAAKE,OACjC,oBAAIH,aAAW,OAAf,SAAuBD,EAAKK,SAASC,OACrC,oBAAIL,aAAW,MAAf,SAAsBD,EAAKO,MAC3B,oBAAIN,aAAW,MAAf,SAAqB,qBAAKO,IAAKR,EAAKS,QAAQC,UAAWC,QAAS,kBAjCxE,SAA4BC,GAE1B,IAAMC,EACJ,gCACE,4BAAG,qBAAKL,IAAKI,EAAQH,QAAQK,UAC7B,6BAAKF,EAAQG,MAAMC,WACnB,8BAAIJ,EAAQV,KAAKE,KAAjB,IAAwBQ,EAAQV,KAAKC,SACrC,4BAAIS,EAAQK,IAAIC,MAChB,4BAAIN,EAAQO,QAEZ,wBAAQR,QAASnB,EAAjB,uBAIJC,IAASC,OAAOmB,EAASlB,SAASC,eAAe,SAmByBwB,CAAmBpB,YAG7FqB,KAAKC,OAIQ,SAASC,IAEtB,IAAMvB,EAzDR,WAAqB,IAAD,EACcwB,mBAAS,IADvB,mBACXC,EADW,KACDC,EADC,KAYlB,OATAC,qBAAU,WAERC,MAAM,yCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJN,EAAYM,EAAMC,cAErB,IAEIR,EA6CMS,GAEb,OACE,sBAAKC,UAAU,iBAAiBC,MAAM,SAAtC,UACE,mDACA,qBAAKD,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,wBAAOA,UAAU,uBAAjB,UACE,uBAAOA,UAAU,aAAjB,SACE,+BACE,oBAAIE,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,sBACA,oBAAIA,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,0BACA,oBAAIA,MAAM,MAAV,yBAGJ,gCACGxC,EAAaG,eCpERsC,QACW,cAA7BC,OAAOlC,SAASmC,UAEe,UAA7BD,OAAOlC,SAASmC,UAEhBD,OAAOlC,SAASmC,SAASC,MACvB,2DCRNhD,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,SDyH5C,kBAAmB8C,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,iB","file":"static/js/main.52187c0f.chunk.js","sourcesContent":["import React, { useEffect, useState} from \"react\"\r\nimport './Datos.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport ReactDOM from 'react-dom';\r\n\r\nfunction useDatos() {\r\n  const [usuarios, setUsuarios] = useState([])\r\n  \r\n  useEffect(() => {\r\n   \r\n    fetch('https://randomuser.me/api/?results=50')\r\n      .then(response => response.json())\r\n      .then(datos => {\r\n        setUsuarios(datos.results)\r\n      })\r\n  }, [])\r\n\r\n  return usuarios\r\n}\r\n\r\nfunction mostrarInformacion(usuario) {\r\n \r\n  const element = (\r\n    <div>\r\n      <p><img src={usuario.picture.large} ></img></p>\r\n      <h1>{usuario.login.username}</h1>\r\n      <p>{usuario.name.last} {usuario.name.first}</p>\r\n      <p>{usuario.dob.age}</p>\r\n      <p>{usuario.email}</p>\r\n      \r\n      <button onClick={volver}>Volver</button>\r\n    </div>\r\n  );\r\n  \r\n  ReactDOM.render(element, document.getElementById('root'));\r\n \r\n}\r\n\r\nfunction volver() {\r\n  \r\n  ReactDOM.render(<Datos/>, document.getElementById('root'));\r\n \r\n}\r\n\r\nfunction generarTabla(users){\r\n  \r\n  return users.map(function(data){\r\n    return (\r\n      <tr >\r\n        <td data-title=\"first\">{data.name.first}</td>\r\n        <td data-title=\"last\">{data.name.last}</td>\r\n        <td data-title=\"city\">{data.location.city}</td>\r\n        <td data-title=\"nat\">{data.nat}</td>\r\n        <td data-title=\"pic\"><img src={data.picture.thumbnail} onClick={()=>mostrarInformacion(data)} ></img></td>\r\n    </tr>\r\n    );\r\n}.bind(this));\r\n  \r\n  }\r\n \r\nexport default function Datos() {\r\n  \r\n  const data = useDatos()\r\n\r\n  return (\r\n    <div className=\"container mt-5\" align=\"center\">\r\n      <h1>Lista de Usuarios</h1>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <table className=\"table table-bordered\">\r\n            <thead className=\"thead-dark\">\r\n              <tr>\r\n                <th scope=\"col\">Nombre</th>\r\n                <th scope=\"col\">Apellido</th>\r\n                <th scope=\"col\">Ciudad</th>\r\n                <th scope=\"col\">Nacionalidad</th>\r\n                <th scope=\"col\">Imagen</th>\r\n              </tr>\r\n            </thead> \r\n            <tbody>\r\n              {generarTabla(data)}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Datos from './componentes/Datos';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\n    \r\n\r\nReactDOM.render(<Datos/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}